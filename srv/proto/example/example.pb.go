// Code generated by protoc-gen-go.
// source: github.com/kazouphq/metadata/srv/proto/example/example.proto
// DO NOT EDIT!

/*
Package go_micro_srv_metadata is a generated protocol buffer package.

It is generated from these files:
	github.com/kazouphq/metadata/srv/proto/example/example.proto

It has these top-level messages:
	Message
	Request
	Response
*/
package go_micro_srv_metadata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Message struct {
	FileName string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=filePath" json:"filePath,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Request struct {
	FileName string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=filePath" json:"filePath,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Message)(nil), "go.micro.srv.metadata.Message")
	proto.RegisterType((*Request)(nil), "go.micro.srv.metadata.Request")
	proto.RegisterType((*Response)(nil), "go.micro.srv.metadata.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleClient interface {
	Send(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type exampleClient struct {
	c           client.Client
	serviceName string
}

func NewExampleClient(serviceName string, c client.Client) ExampleClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.metadata"
	}
	return &exampleClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *exampleClient) Send(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Example.Send", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	Send(context.Context, *Request, *Response) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler) {
	s.Handle(s.NewHandler(&Example{hdlr}))
}

type Example struct {
	ExampleHandler
}

func (h *Example) Send(ctx context.Context, in *Request, out *Response) error {
	return h.ExampleHandler.Send(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x4e, 0xac, 0xca, 0x2f, 0x2d, 0xc8, 0x28, 0xd4,
	0xcf, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0xd4, 0x2f, 0x2e, 0x2a, 0xd3, 0x2f, 0x28, 0xca,
	0x2f, 0xc9, 0xd7, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x85, 0xd1, 0x7a, 0x60, 0x51, 0x21,
	0xd1, 0xf4, 0x7c, 0xbd, 0xdc, 0xcc, 0xe4, 0xa2, 0x7c, 0x3d, 0xa0, 0x4a, 0x3d, 0x98, 0x36, 0x25,
	0x5d, 0x2e, 0x76, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x01, 0x2e, 0x8e, 0xb4, 0xcc,
	0x9c, 0x54, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x98, 0x48, 0x40, 0x62,
	0x49, 0x86, 0x04, 0x13, 0x48, 0x04, 0xa4, 0x3c, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x84, 0x28,
	0xe5, 0xe2, 0x5c, 0x1c, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0xdc, 0x5c, 0xcc,
	0xb9, 0xc5, 0xe9, 0x10, 0xa5, 0x46, 0x21, 0x5c, 0xec, 0xae, 0x10, 0xe7, 0x09, 0x79, 0x72, 0xb1,
	0x04, 0xa7, 0xe6, 0xa5, 0x08, 0xc9, 0xe9, 0x61, 0x75, 0xa1, 0x1e, 0xd4, 0x3e, 0x29, 0x79, 0x9c,
	0xf2, 0x10, 0x0b, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x5e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xb6, 0x7a, 0xf2, 0x28, 0x2a, 0x01, 0x00, 0x00,
}
